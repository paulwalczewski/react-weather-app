{"version":3,"sources":["utils/api.js","config.js","utils/location.js","components/WeatherIcon/WeatherIcon.js","utils/colors.js","App.js","serviceWorker.js","index.js"],"names":["request","url","a","fetch","response","json","getWeatherForecast","latitude","longitude","getWeatherForecastByLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","error","coords","forecast","WeatherIcon","code","src","alt","blendHexColors","colorA","colorB","amount","match","map","c","parseInt","rA","gA","bA","rB","gB","bB","Math","round","toString","padStart","getTemperatureColor","temperature","diff","abs","App","useState","setTemperature","loading","setLoading","setError","weatherIcon","setWeatherIcon","fetchWeatherData","weather","icon","main","temp","message","className","style","background","disabled","onClick","Fragment","min","max","value","tooltip","onChange","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.8f509856.chunk.js","sourcesContent":["import { weatherApiKey } from \"./../config\";\nimport { getUserLocation } from \"./location\";\n\nconst request = async (url) => {\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n};\n\nconst getWeatherForecast = (latitude, longitude) => {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${weatherApiKey}&units=metric`;\n\n  return request(url);\n};\n\nconst getWeatherForecastByLocation = async () => {\n  try {\n    const position = await getUserLocation();\n    const { latitude, longitude } = position.coords;\n    const forecast = await getWeatherForecast(latitude, longitude);\n\n    return forecast;\n  } catch (error) {\n    throw error\n  }\n};\n\nexport { getWeatherForecastByLocation };\n","// in real world, this would be using env variables\nconst weatherApiKey = '523996db4936a43d0a0d45ec2fbfb085';\n\nexport {\n  weatherApiKey\n}","const getUserLocation = () =>\n  new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(\"Geolocation is not supported\");\n    } else {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve(position);\n        },\n        (error) => reject(error)\n      );\n    }\n  });\n\nexport { getUserLocation };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst WeatherIcon = ({ code }) => (\n  <img src={`https://openweathermap.org/img/w/${code}.png`} alt=\"Weather Icon\" />\n);\n\nWeatherIcon.propTypes = {\n  code: PropTypes.string.isRequired,\n};\n\nexport default WeatherIcon;\n","const blendHexColors = (colorA, colorB, amount) => {\n  // I took this function from stack overflow, just cleaned it up a bit.\n\n  const [rA, gA, bA] = colorA.match(/\\w\\w/g).map((c) => parseInt(c, 16));\n  const [rB, gB, bB] = colorB.match(/\\w\\w/g).map((c) => parseInt(c, 16));\n  const r = Math.round(rA + (rB - rA) * amount)\n    .toString(16)\n    .padStart(2, \"0\");\n  const g = Math.round(gA + (gB - gA) * amount)\n    .toString(16)\n    .padStart(2, \"0\");\n  const b = Math.round(bA + (bB - bA) * amount)\n    .toString(16)\n    .padStart(2, \"0\");\n  return \"#\" + r + g + b;\n};\n\nconst colorCold = '#00ffff';\nconst colorMiddle = '#fff700';\nconst colorWarm = '#ff8c00';\n\nconst temperatureCold = -10;\nconst temperatureMiddle = 10;\nconst temperatureWarm = 30;\n\nconst getTemperatureColor = (temperature = 0) => {\n  if (temperature < temperatureCold) {\n      return colorCold;\n  } else if (temperature > temperatureWarm) {\n      return colorWarm;\n  } else if (temperature < temperatureMiddle) {\n    const diff = Math.abs(temperatureMiddle - temperature) / (temperatureMiddle + Math.abs(temperatureCold));\n\n    return blendHexColors(colorMiddle, colorCold, diff);\n  } else if (temperature >= temperatureMiddle) {\n    const diff = Math.abs(1 - temperatureWarm / temperature);\n\n    return blendHexColors(colorWarm, colorMiddle, diff);\n  }\n}\n\nexport { getTemperatureColor };\n","import React, { useState } from \"react\";\nimport Slider from \"react-rangeslider\";\nimport \"react-rangeslider/lib/index.css\";\nimport { getWeatherForecastByLocation } from \"./utils/api\";\nimport WeatherIcon from \"./components/WeatherIcon/WeatherIcon\";\nimport { getTemperatureColor } from \"./utils/colors\";\nimport \"./App.css\";\n\nfunction App() {\n  const [temperature, setTemperature] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  const [weatherIcon, setWeatherIcon] = useState();\n\n  const fetchWeatherData = async () => {\n    setLoading(true);\n    try {\n      const forecast = await getWeatherForecastByLocation();\n\n      setLoading(false);\n\n      setWeatherIcon(forecast.weather[0].icon);\n      setTemperature(forecast.main.temp);\n    }\n    catch (error) {\n      setLoading(false);\n      setError(error?.message);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <header>React Weather App! :)</header>\n      <main style={{ background: getTemperatureColor(temperature) }}>\n        {error && \n          <div className=\"message error\">\n            {error}\n          </div>\n        }\n        {!weatherIcon && (\n          <div className=\"message\">\n            <p>\n              In order to show you what weather is outside, this app needs to\n              know your location.\n            </p>\n            {loading ? (\n              <button disabled>Loading...</button>\n            ) : (\n              <button onClick={fetchWeatherData}>\n                Ok, use my location and show me the weather!\n              </button>\n            )}\n          </div>\n        )}\n        {weatherIcon && (\n          <React.Fragment>\n            <WeatherIcon code={weatherIcon} />\n            <span className=\"degrees\">{temperature} &deg;C</span>\n            <Slider\n              min={-50}\n              max={50}\n              value={temperature}\n              tooltip={false}\n              onChange={(value) => setTemperature(value)}\n            />\n          </React.Fragment>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}